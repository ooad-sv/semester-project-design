@startuml


interface Publisher <<interface>> {
    +attachObserver(Observer) : void
    +detachObserver(Observer) : void
    +notify() : void
}

interface Observer <<interface>> {
}

class Person {
    -firstName : String
    -lastName : String
    -email : String
    -hashedPassword : String
    +getFirstName() : String
    +getLastName() : String
    +getEmail() : String
}

class User {
    -intervalNotificationsEnabled : boolean
    -timeInterval : string
    -alarmNotificationsEnabled : boolean
    -alarmRanges : Double[][]
    +getIntervalNotificationsEnabled() : boolean
    +getTimeInterval() : string
    +getAlarmNotificationsEnabled() : boolean
    +getAlarmRanges() : Double[][]
    -updateAlarmRanges(Double[][]) : void
    -subscribeToStation(Station) : void
    -unsubscribeFromStation(Station) : void
}

class Admin {
    -enableStation(Station) : boolean
    -disableStation(Station) : boolean
}

class Sensor {
    -type : String
    -value : Double
    +getType() : String
    +getValue() : Double
    -updateValue(Double) : void
}

class Station {
    -temperatureSensor : Sensor
    -pressureSensor : Sensor
    -humiditySensor : Sensor
    -altitudeSensor : Sensor
    -observers : Observer[]
    -state : State
    +attachObserver(Observer) : void
    +detachObserver(Observer) : void
    -notify() : void
    -intervalNotify() : void
    -alarmNotify() : void
    +getState() : State
    +setState() : State
}

interface State <<interface>> {
    +intervalNotify() : void
    +alarmNotify() : void
    +enable() : void
    +disable() : void
}

class EnabledState {
    +intervalNotify() : void
    +alarmNotify() : void
    +enable() : void
    +disable() : void
}

class DisabledState {
    +intervalNotify() : void
    +alarmNotify() : void
    +enable() : void
    +disable() : void
}

User --|> Person
Admin --|> Person

Station o-- Sensor

Publisher <|-- Station
Observer <|--- User

Observer <-o Publisher

Station <-- User
Station <-- Admin

State <|-- EnabledState
State <|-- DisabledState

Station o-> State



class DBConnectionPool {
    +getInstance() : DBConnectionPool
    +acquireReusable() : ReusableConnection
    +releaseReusable(ReusableConnection) : void
}

WebServer ..> ReusableConnection
DBConnectionPool - WebServer
ReusableConnection --o DBConnectionPool



class Model {
    +attach(View) : void
    +detach(View) : void
    +notify()
}

class View {
    +update() : void
    +contextInterface() : void
}

class Controller {
    +algorithmInterface() : void
}

class UserModel {
    -userState : User
    +getState() : User
    +setState(User) : void
}

class UserView {
    +update() : void
}

class UserController {
    +algorithmInterface() : void
}

Model -> View
View o-> Controller
Model <|--- UserModel
View <|-- UserView
Controller <|--- UserController
UserView --> UserModel
UserModel <- UserController



abstract class HTMLComponent <<abstract>> {
    -text : String
    +getText() : String
    +setText(String) : void
    +addComponent(Component) : void
    +removeComponent(Component) : void
    +getChild(int) : Component
}

class HTMLLeaf {
    +getText() : String
    +setText(String) : void
}

class HTMLComposite {
    +getText() : String
    +setText(String) : void
    +addComponent(Component) : void
    +removeComponent(Component) : void
    +getChild(int) : Component
}

Client -> HTMLComponent
HTMLComponent <|-- HTMLLeaf
HTMLComponent <|-- HTMLComposite
HTMLComponent <-- HTMLComposite



@enduml